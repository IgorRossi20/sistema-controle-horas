// Script de diagn√≥stico para verificar diverg√™ncia nos c√°lculos de horas
// Dashboard: 22.26 horas vs Relat√≥rios: 25.46 horas

import { timeEntriesService } from './src/services/firebase.js'
import { auth } from './src/main.js'

// Fun√ß√£o para converter horas H.MM para minutos
function hoursToMinutes(hoursStr) {
  if (!hoursStr) return 0
  const [hours, minutes] = hoursStr.toString().split('.').map(Number)
  return (hours || 0) * 60 + (minutes || 0)
}

// Fun√ß√£o para converter minutos para H.MM
function minutesToHours(minutes) {
  const hours = Math.floor(minutes / 60)
  const mins = minutes % 60
  return `${hours}.${mins.toString().padStart(2, '0')}`
}

// Fun√ß√£o para simular o c√°lculo do Dashboard
function calculateDashboardHours(timeEntries) {
  console.log('\n=== C√ÅLCULO DO DASHBOARD ===')
  
  const now = new Date()
  const currentMonth = now.getMonth()
  const currentYear = now.getFullYear()
  
  // Primeiro e √∫ltimo dia do m√™s atual
  const firstDay = new Date(currentYear, currentMonth, 1)
  const lastDay = new Date(currentYear, currentMonth + 1, 0)
  
  console.log(`Per√≠odo Dashboard: ${firstDay.toLocaleDateString()} a ${lastDay.toLocaleDateString()}`)
  
  // Filtrar entradas do m√™s atual
  const currentMonthEntries = timeEntries.filter(entry => {
    let entryDate
    if (entry.date instanceof Date) {
      entryDate = entry.date
    } else if (typeof entry.date === 'string') {
      entryDate = new Date(entry.date)
    } else if (entry.date && entry.date.seconds) {
      entryDate = new Date(entry.date.seconds * 1000)
    } else {
      entryDate = new Date(entry.date)
    }
    
    return entryDate >= firstDay && entryDate <= lastDay
  })
  
  console.log(`Entradas encontradas no Dashboard: ${currentMonthEntries.length}`)
  
  // Calcular total de horas
  let totalMinutes = 0
  currentMonthEntries.forEach((entry, index) => {
    const minutes = hoursToMinutes(entry.hours)
    totalMinutes += minutes
    console.log(`${index + 1}. Data: ${new Date(entry.date).toLocaleDateString()}, Horas: ${entry.hours}, Minutos: ${minutes}, Projeto: ${entry.projectId}`)
  })
  
  const totalHours = minutesToHours(totalMinutes)
  console.log(`Total Dashboard: ${totalHours} (${totalMinutes} minutos)`)
  
  return { totalHours, totalMinutes, entries: currentMonthEntries }
}

// Fun√ß√£o para simular o c√°lculo dos Relat√≥rios
function calculateReportsHours(timeEntries, startDate, endDate) {
  console.log('\n=== C√ÅLCULO DOS RELAT√ìRIOS ===')
  console.log(`Per√≠odo Relat√≥rios: ${startDate.toLocaleDateString()} a ${endDate.toLocaleDateString()}`)
  
  // Filtrar entradas do per√≠odo
  const filteredEntries = timeEntries.filter(entry => {
    let entryDate
    if (entry.date instanceof Date) {
      entryDate = entry.date
    } else if (typeof entry.date === 'string') {
      entryDate = new Date(entry.date)
    } else if (entry.date && entry.date.seconds) {
      entryDate = new Date(entry.date.seconds * 1000)
    } else {
      entryDate = new Date(entry.date)
    }
    
    return entryDate >= startDate && entryDate <= endDate
  })
  
  console.log(`Entradas encontradas nos Relat√≥rios: ${filteredEntries.length}`)
  
  // Calcular total de horas
  let totalMinutes = 0
  filteredEntries.forEach((entry, index) => {
    const minutes = hoursToMinutes(entry.hours)
    totalMinutes += minutes
    console.log(`${index + 1}. Data: ${new Date(entry.date).toLocaleDateString()}, Horas: ${entry.hours}, Minutos: ${minutes}, Projeto: ${entry.projectId}`)
  })
  
  const totalHours = minutesToHours(totalMinutes)
  console.log(`Total Relat√≥rios: ${totalHours} (${totalMinutes} minutos)`)
  
  return { totalHours, totalMinutes, entries: filteredEntries }
}

// Fun√ß√£o principal de diagn√≥stico
async function diagnoseDivergence() {
  try {
    console.log('üîç INICIANDO DIAGN√ìSTICO DE DIVERG√äNCIA NAS HORAS')
    console.log('Dashboard reporta: 22.26 horas')
    console.log('Relat√≥rios reporta: 25.46 horas')
    console.log('Diferen√ßa: 3.20 horas (3h 20min)')
    
    // Obter usu√°rio atual
    const user = auth.currentUser
    if (!user) {
      console.error('‚ùå Usu√°rio n√£o autenticado')
      return
    }
    
    console.log(`\nüë§ Usu√°rio: ${user.uid}`)
    
    // Buscar TODOS os registros do usu√°rio
    console.log('\nüìä Buscando todos os registros...')
    const allTimeEntries = await timeEntriesService.getTimeEntries(user.uid)
    console.log(`Total de registros encontrados: ${allTimeEntries.length}`)
    
    // Calcular como o Dashboard faz
    const dashboardResult = calculateDashboardHours(allTimeEntries)
    
    // Simular o per√≠odo que os Relat√≥rios est√£o usando
    const now = new Date()
    const currentMonth = now.getMonth()
    const currentYear = now.getFullYear()
    const startDate = new Date(currentYear, currentMonth, 1)
    const endDate = new Date(currentYear, currentMonth + 1, 0)
    
    // Calcular como os Relat√≥rios fazem
    const reportsResult = calculateReportsHours(allTimeEntries, startDate, endDate)
    
    // Comparar resultados
    console.log('\nüìä COMPARA√á√ÉO DOS RESULTADOS:')
    console.log(`Dashboard: ${dashboardResult.totalHours} (${dashboardResult.totalMinutes} min)`)
    console.log(`Relat√≥rios: ${reportsResult.totalHours} (${reportsResult.totalMinutes} min)`)
    console.log(`Diferen√ßa: ${reportsResult.totalMinutes - dashboardResult.totalMinutes} minutos`)
    
    // Verificar se h√° entradas diferentes
    console.log('\nüîç AN√ÅLISE DAS DIFEREN√áAS:')
    
    const dashboardIds = new Set(dashboardResult.entries.map(e => e.id))
    const reportsIds = new Set(reportsResult.entries.map(e => e.id))
    
    const onlyInDashboard = dashboardResult.entries.filter(e => !reportsIds.has(e.id))
    const onlyInReports = reportsResult.entries.filter(e => !dashboardIds.has(e.id))
    
    if (onlyInDashboard.length > 0) {
      console.log(`\n‚ö†Ô∏è  Entradas APENAS no Dashboard (${onlyInDashboard.length}):`)
      onlyInDashboard.forEach(entry => {
        console.log(`- ${new Date(entry.date).toLocaleDateString()}: ${entry.hours}h - ${entry.description}`)
      })
    }
    
    if (onlyInReports.length > 0) {
      console.log(`\n‚ö†Ô∏è  Entradas APENAS nos Relat√≥rios (${onlyInReports.length}):`)
      onlyInReports.forEach(entry => {
        console.log(`- ${new Date(entry.date).toLocaleDateString()}: ${entry.hours}h - ${entry.description}`)
      })
    }
    
    if (onlyInDashboard.length === 0 && onlyInReports.length === 0) {
      console.log('‚úÖ Ambos usam as mesmas entradas')
      console.log('‚ùì A diferen√ßa pode estar na l√≥gica de c√°lculo das horas')
      
      // Verificar se h√° diferen√ßas na convers√£o de horas
      console.log('\nüîç VERIFICANDO CONVERS√ÉO DE HORAS:')
      dashboardResult.entries.forEach((entry, index) => {
        const dashboardMinutes = hoursToMinutes(entry.hours)
        const reportsEntry = reportsResult.entries.find(e => e.id === entry.id)
        if (reportsEntry) {
          const reportsMinutes = hoursToMinutes(reportsEntry.hours)
          if (dashboardMinutes !== reportsMinutes) {
            console.log(`‚ö†Ô∏è  Diferen√ßa na entrada ${entry.id}:`)
            console.log(`   Dashboard: ${entry.hours} = ${dashboardMinutes} min`)
            console.log(`   Relat√≥rios: ${reportsEntry.hours} = ${reportsMinutes} min`)
          }
        }
      })
    }
    
    console.log('\n‚úÖ DIAGN√ìSTICO CONCLU√çDO')
    
  } catch (error) {
    console.error('‚ùå Erro no diagn√≥stico:', error)
  }
}

// Executar diagn√≥stico
diagnoseDivergence()

export { diagnoseDivergence }