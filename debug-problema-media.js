/**
 * Script para investigar o problema na m√©dia de 22.38
 * Vamos simular exatamente o que est√° acontecendo no c√≥digo
 */

// Vamos testar com diferentes cen√°rios para encontrar o problema
console.log('=== INVESTIGANDO O PROBLEMA DA M√âDIA 22.38 ===');

// Cen√°rio 1: Se a m√©dia √© 22.38 com 179 horas restantes
const hoursRemaining = 179;
const averageShown = 22.38;

// Calcular quantos dias √∫teis resultariam nessa m√©dia
const daysForThisAverage = hoursRemaining / averageShown;
console.log('\n=== Cen√°rio 1: Reverse Engineering ===');
console.log('Horas restantes:', hoursRemaining);
console.log('M√©dia mostrada:', averageShown);
console.log('Dias √∫teis que resultariam nessa m√©dia:', daysForThisAverage.toFixed(2));

// Cen√°rio 2: Verificar se est√° contando apenas metade dos dias
const correctDays = 15; // Calculado anteriormente
const halfDays = correctDays / 2;
console.log('\n=== Cen√°rio 2: Problema de Contagem ===');
console.log('Dias √∫teis corretos:', correctDays);
console.log('Metade dos dias:', halfDays);
console.log('M√©dia com metade dos dias:', (hoursRemaining / halfDays).toFixed(2));

// Cen√°rio 3: Verificar se h√° problema com inclus√£o/exclus√£o do dia atual
const daysExcludingToday = 14; // 15 - 1 (excluindo hoje)
console.log('\n=== Cen√°rio 3: Excluindo Dia Atual ===');
console.log('Dias √∫teis excluindo hoje:', daysExcludingToday);
console.log('M√©dia excluindo hoje:', (hoursRemaining / daysExcludingToday).toFixed(2));

// Cen√°rio 4: Verificar se h√° problema com o c√°lculo de horas restantes
const possibleRemainingHours = averageShown * correctDays;
console.log('\n=== Cen√°rio 4: Problema nas Horas Restantes ===');
console.log('Se a m√©dia fosse correta (22.38) com 15 dias:');
console.log('Horas restantes deveriam ser:', possibleRemainingHours.toFixed(2));
console.log('Diferen√ßa das horas mostradas:', (possibleRemainingHours - hoursRemaining).toFixed(2));

// Cen√°rio 5: Verificar se h√° problema com dias √∫teis de agosto
const augustWorkingDays = 22; // Total de dias √∫teis em agosto 2024
const workedDays = 1; // Apenas 1 dia trabalhado at√© agora
const remainingDaysInMonth = augustWorkingDays - workedDays;
console.log('\n=== Cen√°rio 5: C√°lculo Baseado no M√™s Todo ===');
console.log('Total de dias √∫teis em agosto:', augustWorkingDays);
console.log('Dias j√° trabalhados:', workedDays);
console.log('Dias √∫teis restantes no m√™s:', remainingDaysInMonth);
console.log('M√©dia com dias restantes do m√™s:', (hoursRemaining / remainingDaysInMonth).toFixed(2));

// Cen√°rio 6: Verificar se est√° usando dias corridos ao inv√©s de √∫teis
const currentDate = new Date(2024, 7, 12); // 12 de agosto
const lastDay = new Date(2024, 7, 31); // 31 de agosto
const remainingCalendarDays = Math.ceil((lastDay - currentDate) / (1000 * 60 * 60 * 24));
console.log('\n=== Cen√°rio 6: Dias Corridos ===');
console.log('Dias corridos restantes:', remainingCalendarDays);
console.log('M√©dia com dias corridos:', (hoursRemaining / remainingCalendarDays).toFixed(2));

// Conclus√£o
console.log('\n=== CONCLUS√ÉO ===');
if (Math.abs(daysForThisAverage - 8) < 0.1) {
  console.log('üîç PROBLEMA ENCONTRADO: O c√≥digo est√° usando aproximadamente 8 dias ao inv√©s de 15!');
  console.log('Isso sugere que h√° um bug na fun√ß√£o getRemainingWorkingDays.');
} else if (Math.abs((hoursRemaining / halfDays) - averageShown) < 0.1) {
  console.log('üîç PROBLEMA ENCONTRADO: O c√≥digo est√° contando metade dos dias √∫teis!');
} else {
  console.log('ü§î O problema n√£o foi identificado com os cen√°rios testados.');
  console.log('√â necess√°rio investigar mais o c√≥digo.');
}