// Script para testar a funcionalidade de relat√≥rios
// Execute este script no console do navegador (F12) na p√°gina de relat√≥rios

console.log('üîç TESTANDO FUNCIONALIDADE DE RELAT√ìRIOS');
console.log('=' .repeat(50));

// Verificar se os servi√ßos est√£o dispon√≠veis
const checkServices = () => {
  console.log('\nüìã Verificando servi√ßos dispon√≠veis...');
  
  // Verificar se o Vue app est√° carregado
  if (typeof window.Vue !== 'undefined') {
    console.log('‚úÖ Vue.js carregado');
  } else {
    console.log('‚ùå Vue.js n√£o encontrado');
  }
  
  // Verificar se o Firebase est√° configurado
  if (typeof window.firebase !== 'undefined' || document.querySelector('script[src*="firebase"]')) {
    console.log('‚úÖ Firebase detectado');
  } else {
    console.log('‚ùå Firebase n√£o detectado');
  }
  
  // Verificar se estamos na p√°gina de relat√≥rios
  const currentPath = window.location.pathname;
  console.log('üìç P√°gina atual:', currentPath);
  
  if (currentPath.includes('reports') || currentPath.includes('relatorios')) {
    console.log('‚úÖ P√°gina de relat√≥rios detectada');
  } else {
    console.log('‚ö†Ô∏è N√£o est√° na p√°gina de relat√≥rios');
  }
};

// Verificar elementos da interface
const checkUI = () => {
  console.log('\nüé® Verificando elementos da interface...');
  
  const generateBtn = document.querySelector('button[class*="btn-primary"]:not([class*="dropdown"])');
  if (generateBtn) {
    console.log('‚úÖ Bot√£o "Gerar Relat√≥rio" encontrado:', generateBtn.textContent.trim());
    console.log('   Habilitado:', !generateBtn.disabled);
  } else {
    console.log('‚ùå Bot√£o "Gerar Relat√≥rio" n√£o encontrado');
  }
  
  const monthSelect = document.querySelector('select[id*="month"], select[class*="form-select"]:first-of-type');
  if (monthSelect) {
    console.log('‚úÖ Seletor de m√™s encontrado, valor:', monthSelect.value);
  } else {
    console.log('‚ùå Seletor de m√™s n√£o encontrado');
  }
  
  const yearSelect = document.querySelector('select[id*="year"], select[class*="form-select"]:nth-of-type(2)');
  if (yearSelect) {
    console.log('‚úÖ Seletor de ano encontrado, valor:', yearSelect.value);
  } else {
    console.log('‚ùå Seletor de ano n√£o encontrado');
  }
  
  const reportArea = document.querySelector('.card-body');
  if (reportArea) {
    console.log('‚úÖ √Årea de relat√≥rio encontrada');
    const hasData = reportArea.textContent.includes('Nenhum registro') || 
                   reportArea.textContent.includes('Selecione um m√™s');
    if (hasData) {
      console.log('üìù Status: Aguardando gera√ß√£o de relat√≥rio');
    }
  } else {
    console.log('‚ùå √Årea de relat√≥rio n√£o encontrada');
  }
};

// Verificar dados no localStorage
const checkLocalData = () => {
  console.log('\nüíæ Verificando dados locais...');
  
  const timeEntries = localStorage.getItem('timeEntries');
  if (timeEntries) {
    try {
      const entries = JSON.parse(timeEntries);
      console.log('‚úÖ Entradas de tempo encontradas:', entries.length);
      
      if (entries.length > 0) {
        console.log('üìä Primeira entrada:', {
          data: entries[0].date,
          horas: entries[0].hours,
          projeto: entries[0].projectId,
          descricao: entries[0].description
        });
      }
    } catch (error) {
      console.log('‚ùå Erro ao parsear entradas de tempo:', error);
    }
  } else {
    console.log('‚ö†Ô∏è Nenhuma entrada de tempo no localStorage');
  }
  
  const projects = localStorage.getItem('projects');
  if (projects) {
    try {
      const projectList = JSON.parse(projects);
      console.log('‚úÖ Projetos encontrados:', projectList.length);
    } catch (error) {
      console.log('‚ùå Erro ao parsear projetos:', error);
    }
  } else {
    console.log('‚ö†Ô∏è Nenhum projeto no localStorage');
  }
};

// Simular clique no bot√£o de gerar relat√≥rio
const testReportGeneration = () => {
  console.log('\nüß™ Testando gera√ß√£o de relat√≥rio...');
  
  const generateBtn = document.querySelector('button[class*="btn-primary"]:not([class*="dropdown"])');
  const monthSelect = document.querySelector('select[id*="month"], select[class*="form-select"]:first-of-type');
  const yearSelect = document.querySelector('select[id*="year"], select[class*="form-select"]:nth-of-type(2)');
  
  if (!generateBtn || !monthSelect || !yearSelect) {
    console.log('‚ùå Elementos necess√°rios n√£o encontrados para teste');
    return;
  }
  
  // Definir valores padr√£o se n√£o estiverem selecionados
  if (!monthSelect.value) {
    monthSelect.value = new Date().getMonth() + 1;
    monthSelect.dispatchEvent(new Event('change', { bubbles: true }));
    console.log('üìÖ M√™s definido para:', monthSelect.value);
  }
  
  if (!yearSelect.value) {
    yearSelect.value = new Date().getFullYear();
    yearSelect.dispatchEvent(new Event('change', { bubbles: true }));
    console.log('üìÖ Ano definido para:', yearSelect.value);
  }
  
  // Aguardar um pouco e tentar clicar
  setTimeout(() => {
    if (!generateBtn.disabled) {
      console.log('üîÑ Clicando no bot√£o "Gerar Relat√≥rio"...');
      generateBtn.click();
      
      // Verificar resultado ap√≥s 2 segundos
      setTimeout(() => {
        const reportArea = document.querySelector('.card-body');
        if (reportArea) {
          const hasSpinner = reportArea.querySelector('.spinner-border');
          const hasData = reportArea.textContent.includes('Total de Horas');
          const hasNoData = reportArea.textContent.includes('Nenhum registro');
          
          if (hasSpinner) {
            console.log('‚è≥ Relat√≥rio sendo gerado...');
          } else if (hasData) {
            console.log('‚úÖ Relat√≥rio gerado com sucesso!');
          } else if (hasNoData) {
            console.log('‚ö†Ô∏è Relat√≥rio gerado, mas sem dados para o per√≠odo');
          } else {
            console.log('‚ùì Status do relat√≥rio indefinido');
          }
        }
      }, 2000);
    } else {
      console.log('‚ùå Bot√£o est√° desabilitado');
    }
  }, 500);
};

// Executar todos os testes
const runAllTests = () => {
  checkServices();
  checkUI();
  checkLocalData();
  
  // Aguardar um pouco antes de testar a gera√ß√£o
  setTimeout(() => {
    testReportGeneration();
  }, 1000);
};

// Executar testes
runAllTests();

// Disponibilizar fun√ß√µes globalmente para uso manual
window.testReports = {
  checkServices,
  checkUI,
  checkLocalData,
  testReportGeneration,
  runAllTests
};

console.log('\nüõ†Ô∏è COMANDOS DISPON√çVEIS:');
console.log('- testReports.checkServices() - Verificar servi√ßos');
console.log('- testReports.checkUI() - Verificar interface');
console.log('- testReports.checkLocalData() - Verificar dados locais');
console.log('- testReports.testReportGeneration() - Testar gera√ß√£o');
console.log('- testReports.runAllTests() - Executar todos os testes');