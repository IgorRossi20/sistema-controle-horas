// Script para diagnosticar diverg√™ncia entre Dashboard e Relat√≥rios
// Execute este script no console do navegador

console.log('üîç Iniciando diagn√≥stico de diverg√™ncia...');

// Fun√ß√£o para simular o c√°lculo do Dashboard
function simulateDashboardCalculation() {
  console.log('üìä Simulando c√°lculo do Dashboard...');
  
  // Obter dados atuais (simular)
  const currentDate = new Date();
  const currentMonth = currentDate.getMonth();
  const currentYear = currentDate.getFullYear();
  
  // Calcular primeiro e √∫ltimo dia do m√™s atual
  const firstDayOfMonth = new Date(currentYear, currentMonth, 1);
  const lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0);
  
  console.log('üìÖ Dashboard - Per√≠odo:', {
    firstDay: firstDayOfMonth.toISOString(),
    lastDay: lastDayOfMonth.toISOString(),
    month: currentMonth + 1,
    year: currentYear
  });
  
  return { firstDayOfMonth, lastDayOfMonth, currentMonth, currentYear };
}

// Fun√ß√£o para simular o c√°lculo dos Relat√≥rios
function simulateReportsCalculation() {
  console.log('üìã Simulando c√°lculo dos Relat√≥rios...');
  
  // Agosto de 2025 (como mostrado na imagem)
  const selectedMonth = 8; // Agosto
  const selectedYear = 2025;
  
  // Calcular per√≠odo para relat√≥rios
  const startDate = new Date(selectedYear, selectedMonth - 1, 1);
  const endDate = new Date(selectedYear, selectedMonth, 0, 23, 59, 59);
  
  console.log('üìÖ Relat√≥rios - Per√≠odo:', {
    startDate: startDate.toISOString(),
    endDate: endDate.toISOString(),
    month: selectedMonth,
    year: selectedYear
  });
  
  return { startDate, endDate, selectedMonth, selectedYear };
}

// Fun√ß√£o para comparar per√≠odos
function comparePeriods() {
  console.log('üîÑ Comparando per√≠odos...');
  
  const dashboard = simulateDashboardCalculation();
  const reports = simulateReportsCalculation();
  
  const dashboardStart = dashboard.firstDayOfMonth;
  const dashboardEnd = dashboard.lastDayOfMonth;
  const reportsStart = reports.startDate;
  const reportsEnd = reports.endDate;
  
  console.log('‚öñÔ∏è Compara√ß√£o de per√≠odos:');
  console.log('Dashboard:', {
    inicio: dashboardStart.toLocaleDateString('pt-BR'),
    fim: dashboardEnd.toLocaleDateString('pt-BR'),
    mes: dashboard.currentMonth + 1,
    ano: dashboard.currentYear
  });
  
  console.log('Relat√≥rios:', {
    inicio: reportsStart.toLocaleDateString('pt-BR'),
    fim: reportsEnd.toLocaleDateString('pt-BR'),
    mes: reports.selectedMonth,
    ano: reports.selectedYear
  });
  
  // Verificar se os per√≠odos s√£o diferentes
  const sameStart = dashboardStart.getTime() === reportsStart.getTime();
  const sameEnd = dashboardEnd.getTime() === reportsEnd.getTime();
  
  if (!sameStart || !sameEnd) {
    console.log('üö® DIVERG√äNCIA ENCONTRADA: Os per√≠odos s√£o diferentes!');
    console.log('Dashboard est√° filtrando:', dashboard.currentMonth + 1 + '/' + dashboard.currentYear);
    console.log('Relat√≥rios est√° filtrando:', reports.selectedMonth + '/' + reports.selectedYear);
    return false;
  } else {
    console.log('‚úÖ Os per√≠odos s√£o iguais');
    return true;
  }
}

// Fun√ß√£o para verificar dados no Firebase
async function checkFirebaseData() {
  console.log('üî• Verificando dados no Firebase...');
  
  try {
    // Simular busca de dados (voc√™ precisar√° adaptar isso)
    console.log('üì° Simulando busca de dados...');
    
    // Aqui voc√™ pode adicionar c√≥digo real para buscar dados do Firebase
    // usando as fun√ß√µes timeEntriesService.getTimeEntries() e timeEntriesService.getTimeEntriesByPeriod()
    
    console.log('‚ÑπÔ∏è Para verificar dados reais, execute no console da aplica√ß√£o:');
    console.log('timeEntriesService.getTimeEntries(userId)');
    console.log('timeEntriesService.getTimeEntriesByPeriod(userId, startDate, endDate)');
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar dados:', error);
  }
}

// Executar diagn√≥stico
function runDiagnosis() {
  console.log('üöÄ Executando diagn√≥stico completo...');
  
  const periodsMatch = comparePeriods();
  
  if (!periodsMatch) {
    console.log('üéØ CAUSA PROV√ÅVEL: Dashboard e Relat√≥rios est√£o filtrando per√≠odos diferentes!');
    console.log('üí° SOLU√á√ÉO: Verificar se ambos est√£o usando o mesmo m√™s/ano atual');
  }
  
  checkFirebaseData();
  
  console.log('‚úÖ Diagn√≥stico conclu√≠do!');
}

// Executar
runDiagnosis();